#+TITLE: Emacs Config
#+AUTHOR: Thomas Alexgaard
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of Contents :toc:
- [[#config-example-stuff][Config example stuff]]
- [[#server-management][Server management]]
- [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#enable-use-package-support][Enable use-package support]]
- [[#startup-basics][Startup Basics]]
  - [[#visual-interface-tweaks][Visual Interface Tweaks]]
  - [[#custom-behaviour][Custom behaviour]]
- [[#evil-config][Evil Config]]
- [[#general][General]]
  - [[#general-keybinds][General Keybinds]]
- [[#note-taking-with-org][Note Taking with Org]]
- [[#which-key][Which Key]]
- [[#starter-page][Starter Page]]
- [[#themes][Themes]]

* Config example stuff

DistroTube Emacs (GOING THROUGH THIS NOW):
https://www.youtube.com/watch?v=4ZH9pobulDo&list=PL5--8gKSku15e8lXf7aLICFmAHQVo0KXX&index=2


https://www.google.com/search?channel=fs&client=ubuntu&q=emacs+c%2B%2B+lsp+default+tab+size
https://github.com/emacs-lsp/lsp-mode/issues/1530
https://www.reddit.com/r/emacs/comments/gwv9l6/how_to_stop_lspmode_fixing_my_code_ever/

https://www.youtube.com/watch?v=51eSeqcaikM
https://youtu.be/KZAhxdXOCP4
https://www.youtube.com/watch?v=KlYctaKMixA
https://www.youtube.com/watch?v=PKaJoqQQoIA
https://www.youtube.com/watch?v=lFrQ-PUgKHo
https://www.youtube.com/watch?v=Gi7yBMYZylU
https://www.youtube.com/watch?v=rZkTBrLgzq4

* Server management

We want to run emacs in a server to increase startup speed, and to keep buffers alive across emacs windows. 
To better configure a emacs server, we create a reload-config lisp function that reloads the config file.
We need to be able to stop the server for a proper reset. This is smart if emacs starts acting out or breaks but you are still able to access new buffers.

#+begin_src emacs-lisp
(load "server")
(unless (server-running-p) (server-start))

;; Server & Config Management
(defun th/server-stop ()
  "Save buffers, Quit, and Shutdown (kill) server"
  (interactive)
  (save-some-buffers)
  (kill-emacs)
  )

(defun th/reload-config ()
  "Reload config"
  (interactive)
  (org-babel-load-file (expand-file-name "config.org" user-emacs-directory))
  )
#+end_src

* Elpaca Package Manager

#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.5)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src

** Enable use-package support

#+begin_src emacs-lisp
;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)

;;Turns off elpaca-use-package-mode current declartion
;;Note this will cause the declaration to be interpreted immediately (not deferred).
;;Useful for configuring built-in emacs features.
(use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

;; Don't install anything. Defer execution of BODY
;;(elpaca nil (message "deferred"))
#+end_src


* Startup Basics

Lets start by changing the default heap percentage needed for automatic GC to happen.
#+begin_src emacs-lisp
(setq gc-cons-percentage 0.6)
#+end_src

Basic changes
#+begin_src emacs-lisp
  ;; Move backup files to backup directory
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups/")))
  ;; Default tab sizes
  (setq-default tab-width 4)
  ;; a 80 line column
  (setq-default fill-column 80)
  ;; Life is too short for long questions
  (setq use-short-answers t)
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; no save files everywhere
  (setq auto-save-default nil)
#+end_src

** Visual Interface Tweaks

We need to change some basic functionality and looks of emacs to modernize it, this includes disabling distracting features like the tool bar and menu stuff.

#+begin_src emacs-lisp
;; Disable bars and other clutter
(menu-bar-mode -1)
(tool-bar-mode -1) 
(scroll-bar-mode -1)

;; auto close bracket insertion. New in emacs 24
(electric-pair-mode 1)
;; Enable text wrap by default
(global-visual-line-mode t)
;; Enable relative line numbers globally
;(global-linum-mode t)
(setq display-line-numbers 'relative)

;; Set font size
(setq th/font-size 110)
(set-face-attribute 'mode-line nil  :height th/font-size)
(set-face-attribute 'default nil :height th/font-size)
#+end_src

** Custom behaviour

A useful feature is to be able to rename files that exists in open buffers without having them be dublicated.
#+begin_src emacs-lisp
(defun th/rename-current-buffer-file ()
  "Renames current buffer and the buffer's file."
  (interactive)
  (let* ((name (buffer-name))
        (filename (buffer-file-name))
        (basename (file-name-nondirectory filename)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " (file-name-directory filename) basename nil basename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'"
                   name (file-name-nondirectory new-name)))))))
#+end_src

Another useful feature is to use emacs as our terminal manager, since we run emacs as a server.
Here we create indexed terminals instead of having only one terminal active and having to rename it
to get more.
#+begin_src emacs-lisp
  (defvar th/term-counter 0)

  (defun th/term ()
    "Create a indexed terminal"
    (interactive)
    (setq th/term-counter (+ th/term-counter 1))
    (setq title (concat "Terminal-" (number-to-string th/term-counter)))
    (setq buf-title (concat "*" title "*"))
    (message buf-title)
    (set-buffer (make-term title "/bin/bash"))
    (term-mode)
    (term-char-mode)
    (switch-to-buffer buf-title))
#+end_src

* Evil Config

Emacs bindings are a pain.
But behold, lets bastardize our creation with proper editing herecy!
We install evil vim as our default editing mode.

#+begin_src emacs-lisp
  ;; Better undo compatability
  (use-package undo-fu
	:demand t)
  ;; Proper editing
  (use-package evil
	:demand t
	;; tweak evil's configuration before loading it
	:init      
	;; This is optional since it's already set to t by default.
	(setq evil-want-integration t) 
	(setq evil-want-keybinding nil)
	(setq evil-vsplit-window-right t)
	(setq evil-split-window-below t)
	:config
	(evil-mode)
	(setq evil-search-module 'evil-search)
	;; no vim insert bindings
	(setq evil-undo-system 'undo-fu)
  )

  ;; Editing but for lots of modes
  (use-package evil-collection
	:demand t
	:after 'evil
	:config
	(setq evil-collection-mode-list '(dashboard dired ibuffer))
	(setq evil-want-keybinding nil)
	(evil-collection-init))

  (use-package evil-tutor
    :demand t)
#+end_src

Vim needs a leader key, this makes bindings easier to reconfigure if a new leader key is defined in the future. Evil vim does not know this notion, so we define it ourselves. 

But even vim lacks some movement features that we would like... So we setup some lazy movement mechanics that is basically a copy of how i did things in vim.

* General

#+begin_src emacs-lisp
(use-package general
  :demand t
  :config
  (general-evil-setup)
  (general-create-definer th/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; default leader key access
    :global-prefix "M-SPC") ;; leader key access in insert mode
)
#+end_src

** General Keybinds

#+begin_src emacs-lisp
(th/leader-keys ; Buffer management
  "b" '(:ignore t :wk "Buffer")
  "b s" '(switch-to-buffer :wk "Switch buffer")
  "b k" '(kill-this-buffer :wk "Kill current buffer")
  "b n" '(next-buffer :wk "Next buffer")
  "b p" '(previous-buffer :wk "Previous buffer")
  "b r" '(revert-buffer :wk "Reload buffer")
  "b m" '(ibuffer :wk "Manager buffers"))

(th/leader-keys ; Evil window management
  "h" '(evil-window-left :wk "Go to left window")
  "j" '(evil-window-down :wk "Go to lower window")
  "k" '(evil-window-up :wk "Go to upper window")
  "l" '(evil-window-right :wk "Go to right window"))

(th/leader-keys ; elisp evaluation
  "e" '(:ignore t :wk "Evaluate elisp")
  "e b" '(eval-buffer :wk "Evaluate buffer")
  "e d" '(eval-defun :wk "Evaluate function at or after point")
  "e e" '(eval-expression :wk "Evaluate expression")
  "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
  "e r" '(eval-region :wk "Evaluate elisp region"))

(th/leader-keys ; miscelaneous keybinds
  "." '(find-file :wk "Find file")
  "TAB TAB" '(comment-line :wk "Comment line at point")
  "f c" '((lambda ()
           (interactive)
           (find-file (expand-file-name "config.org" user-emacs-directory)))
        :wk "Goto emacs config file"))

(define-key global-map (kbd "<escape>") #'keyboard-escape-quit)

(th/leader-keys ; Help stuff
  "d" '(:ignore t :wk "Describe (Help)")
  "d f" '(describe-function :wk "Describe function")
  "d v" '(describe-variable :wk "Describe variable"))
  ;; TODO: port these too..
;; (define-key evil-normal-state-map (kbd "J") "10j")
;; (define-key evil-normal-state-map (kbd "K") "10k")
#+end_src

* Note Taking with Org

Org is already loaded in init.el.

Enable table of content generation:
#+begin_src emacs-lisp
(use-package toc-org
  :demand t
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

We need a way to manage files, documents and notes on a lot of stuff.
This could be seperate from emacs but lets try experimenting with org mode, a zettlekasten method of keeping a notebook full of notes that may, or may not have correlations, and lets you easily navigate notes. 
#+begin_src emacs-lisp
  (setq org-src-preserve-indentation t)
  (use-package org-roam
    :demand t
    :init
      (setq org-roam-v2-ack t)
    :custom
      (org-roam-directory "~/Dropbox/Org-Roam")
    :config
      (org-roam-setup)
      (defun th/org-roam-node-insert-immediate (arg &rest args)
          (interactive "P")
          (let ((args (cons arg args))
                  (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                          '(:immediate-finish t)))))
              (apply #'org-roam-node-insert args)))

      (th/leader-keys
        "wI" '(org-roam-node-insert :wk "Insert link to node")
        "wi" '(th/org-roam-node-insert-immediate :wk "Insert link and create node")
        "wf" '(org-roam-node-find :wk "Find node")
        "wb" '(org-roam-buffer-toggle :wk "Toggle roam buffer")
        "wl" '(org-insert-link :wk "Insert link")
      )
    )
#+end_src


We want a efficient way of searching in our roam notebook
#+begin_src emacs-lisp
(use-package deadgrep
  :demand t
  :after org-roam
  :config
    (defun th/roam-search (search-term dir)
          "deadgrep in org-roam-directory"
          (interactive (let (
                 (search-term (deadgrep--read-search-term)))
                         (list search-term org-roam-directory)
                 ))
          (deadgrep search-term dir))
  )
#+end_src

We also want a cool notebook visualizer
#+begin_src emacs-lisp
(use-package org-roam-ui
  :demand t
  :after org-roam
  :config
    (th/leader-keys
      "wg" '(org-roam-ui-open :wk "Open roam graph"))
)
#+end_src

* Which Key

Command autocompletion is a must for a complete experience:
#+begin_src emacs-lisp
(use-package which-key
  :demand t
  :init
    (which-key-mode 1)
  :config
    (setq which-key-side-window-location       'bottom
          which-key-sort-order                 #'which-key-key-order-alpha
          which-key-sort-uppercase-first       nil
          which-key-add-column-padding         1
          which-key-max-display-columns        20
          which-key-min-display-columns        6
          which-key-side-window-slot           -10
          which-key-side-window-max-height     0.25
          which-key-idle-delay                 0.2
          which-key-max-description-length     25
          which-key-allow-imprecise-window-fit t
    ))
#+end_src

* Starter Page

#+begin_src emacs-lisp
;; Count startup time of emacs
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs was ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+end_src

* Themes

We install some themes for emacs.
We set monokai as default because of its clarity and warm usage of pastel colors.

#+begin_src emacs-lisp
(use-package monokai-theme
 :demand t 
 :config
   (load-theme 'monokai t))
#+end_src

#+begin_src emacs-lisp
  (use-package better-defaults
		:demand t
	)
;; set a default theme
;;(use-package  gruvbox-theme
   ;;:config
   ;(load-theme 'gruvbox-dark-hard t))
#+end_src

Enable current line bar after the theme is loaded
#+begin_src emacs-lisp
; TODO: not working!
(hl-line-mode t)
#+end_src


