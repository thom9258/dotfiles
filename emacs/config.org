* Server management

We want to run emacs in a server to increase startup speed, and to keep buffers alive across emacs windows. 
To better configure a emacs server, we create a reload-config lisp function that reloads the config file.
We need to be able to stop the server for a proper reset. This is smart if emacs starts acting out or breaks but you are still able to access new buffers.

#+begin_src emacs-lisp
(load "server")
(unless (server-running-p) (server-start))

;; define function to shutdown emacs server instance
(defun th/server-stop ()
  "Save buffers, Quit, and Shutdown (kill) server"
  (interactive)
  (save-some-buffers)
  (kill-emacs)
  )

(defun th/reload-config ()
  "Reload config"
  (interactive)
  ;;(org-babel-load-file "~/.emacs.d/config.org")
  (org-babel-load-file (concat config-root "config.org"))
  ;;(load-file (concat config-root "config.el"))
  )
#+end_src

* Startup Basics

We need to change some basic functionality and looks of emacs to modernize it.
this includes disabling distracting features like the tool bar and menu stuff.
Furthermore, the startup-screen can be annoying so we just boot into a blank scratch buffer instead.

#+begin_src emacs-lisp
;; Disable bars and other clutter
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1) 
(hl-line-mode)
(setq inhibit-startup-screen t)

;; Enable line numbers globally
(global-linum-mode t)
;; auto close bracket insertion. New in emacs 24
(electric-pair-mode 1)
;; Enable text wrap by default
(add-hook 'text-mode-hook 'visual-line-mode)
;; Move backup files to backup directory
(setq backup-directory-alist '(("." . "~/.emacs.d/backups/")))
;; Default tab sizes
(setq-default tab-width 4)

;; line at 81 character mode
(require 'whitespace)
(setq whitespace-line-column 81) ;; limit line length
(setq whitespace-style '(face lines-tail))
(add-hook 'prog-mode-hook 'whitespace-mode)
#+end_src

A useful feature is to be able to rename files that exists in open buffers.

#+begin_src emacs-lisp
;; Function to rename current file
(defun th/rename-current-buffer-file ()
  "Renames current buffer and the buffer's file."
  (interactive)
  (let* ((name (buffer-name))
        (filename (buffer-file-name))
        (basename (file-name-nondirectory filename)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " (file-name-directory filename) basename nil basename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'"
                   name (file-name-nondirectory new-name)))))))
#+end_src

It is also intresting to track emacs startup time, this can be added as a hook.
_note that this does not work for the server_, but is a useful debugging, performance tracker.

#+begin_src emacs-lisp
;; Count startup time of emacs
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+end_src

* Directory traversal

Emacs as little support for a visual tree-like directory navigator, so we provide one.

TODO: figure out a way for it to set a root directory when we want it to, and not just based on when we open it for the first time. 

#+begin_src emacs-lisp
(use-package neotree)
#+end_src

* Evil Config

Emacs bindings can be a pain.
But behold, lets bastardize our creation with proper editing herecy!
We install evil vim as our default editing mode.

#+begin_src emacs-lisp
;; Better undo compatability
(use-package undo-fu)

;; Proper editing
(use-package evil
  ;; tweak evil's configuration before loading it
  :init      
  ;; This is optional since it's already set to t by default.
  (setq evil-want-integration t) 
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (evil-mode))

;; Editing but for lots of modes
(use-package evil-collection
  :after 'evil
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))
(evil-mode)
(evil-collection-init)

;; to work properly with evil-collection
(setq evil-want-keybinding nil)
;; no vim insert bindings
(setq evil-undo-system 'undo-fu)

#+end_src

Vim needs a leader key, this makes bindings easier to reconfigure if a new leader key is defined in the future. Evil vim does not know this notion, so we define it ourselves. 

But even vim lacks some movement features that we would like... So we setup some lazy movement mechanics.

#+begin_src emacs-lisp

(define-key global-map (kbd "<escape>") #'keyboard-escape-quit)

;; Evil Leader Key
(setq LEADER "<SPC>")
;; TODO: Space is bound in some window modes, find a way to disable it!

;; Vim window movement
(define-key evil-normal-state-map (kbd (concat LEADER "h")) #'evil-window-left)
(define-key evil-normal-state-map (kbd (concat LEADER "j")) #'evil-window-down)
(define-key evil-normal-state-map (kbd (concat LEADER "k")) #'evil-window-up)
(define-key evil-normal-state-map (kbd (concat LEADER "l")) #'evil-window-right)

;; Window Creation Deletion
(define-key evil-normal-state-map (kbd (concat LEADER "sb")) #'split-window-below)
(define-key evil-normal-state-map (kbd (concat LEADER "sr")) #'split-window-right)
(define-key evil-normal-state-map (kbd (concat LEADER "sq")) #'delete-window)

;; Buffer Management
(define-key evil-normal-state-map (kbd (concat LEADER "bs")) 'ibuffer)
(define-key evil-normal-state-map (kbd (concat LEADER "bn")) 'next-buffer)
(define-key evil-normal-state-map (kbd (concat LEADER "bp")) 'previous-buffer)

;; Quick file scrolling
(define-key evil-normal-state-map (kbd "J") "10j")
(define-key evil-normal-state-map (kbd "K") "10k")

;; Toggle directory tree
(define-key evil-normal-state-map (kbd (concat LEADER "t")) #'neotree-toggle)
;; TODO: Make a bind to start neotree from current file directory.
#+end_src

* Org-Mode

We need a way to manage files, documents and notes on a lot of stuff.
This could be seperate from emacs but lets try experimenting with org mode, a zettlekasten method of keeping a notebook full of notes that may, or may not have correlations, and lets you easily navigate notes. 

#+begin_src emacs-lisp
;;(use-package org)

(setq org-src-preserve-indentation t)
(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/Dropbox/Org-Roam")
  :config
  (org-roam-setup)
  )

;; (with-eval-after-load 'org-faces
;;   (dolist (face '(org-document-title
;;                  org-level-1
;;                  org-level-2
;;                  org-level-3))
;;    (set-face-attribute face nil :height 1.0)))
#+end_src

Org mode has some bad themeing choises we would like to disable..

#+begin_src emacs-lisp
(defun th/org-mode-hook ()
  "Stop the org-level headers from increasing in height relative to the other text."
  (dolist (face '(org-level-1
                  org-level-2
                  org-level-3
                  org-level-4
                  org-level-5))
  (set-face-attribute face nil :weight 'semi-bold :height 1.0)))

(add-hook 'org-mode-hook #'th/org-mode-hook)
#+end_src

We are evil vim users, so we need to set our own org-roam navigation bindings, i have decided to use w as the preface for org roam bindings.
We also create a smarter method of creating notes, the default behaviour forces you to use node-insert twice, once for creating a note, and once for creating a link to a note. We make a immediate function to ease this overhead.

#+begin_src emacs-lisp
;; Insert Org-Roam node link quickly without opening a buffer
(defun th/org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))

(define-key evil-normal-state-map (kbd (concat LEADER "wI")) 'org-roam-node-insert)
(define-key evil-normal-state-map (kbd (concat LEADER "wi")) 'th/org-roam-node-insert-immediate)
(define-key evil-normal-state-map (kbd (concat LEADER "wg")) 'org-roam-graph)
(define-key evil-normal-state-map (kbd (concat LEADER "wf")) 'org-roam-node-find)
;; Shows backlinks for current buffer
(define-key evil-normal-state-map (kbd (concat LEADER "wt")) 'org-roam-buffer-toggle)

;; Max width for org images
(setq org-image-actual-width nil)
#+end_src

* PDF management

In order to play well with pdf's and being able to show them in buffers, we need to install some packages.

#+begin_src emacs-lisp
(unless (package-installed-p 'pdf-tools)
  (package-install 'pdf-tools))

(pdf-tools-install)
(setq-default pdf-view-display-size 'fit-width)
;; Make pdf-tools default (also for tex compilation)
(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
      TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
      TeX-source-correlate-start-server t)
(add-hook 'TeX-after-compilation-finished-functions
          #'TeX-revert-document-buffer)

;; Make pdf-tools play well with "linum-mode" for some reason..
(add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))
#+end_src

A useful feature in emacs is the ability to show images, we expand this feature with pdf viewing.

#+begin_src emacs-lisp
(package-install 'org-inline-pdf)
(add-hook 'org-mode-hook #'org-inline-pdf-mode)
#+end_src

* Development Environment

We need some programming help in our emacs config.
This is something we can do with a LSP (languange server protocol) using lsp-mode.
We also make use of helm, a better file searcher that suits our needs.
We need to install a lot of packages for this..

#+begin_src emacs-lisp
(setq package-selected-packages '(lsp-mode yasnippet lsp-treemacs helm-lsp
    projectile hydra flycheck company avy which-key helm-xref dap-mode))

(when (cl-find-if-not #'package-installed-p package-selected-packages)
  (package-refresh-contents)
  (mapc #'package-install package-selected-packages))

;; sample `helm' configuration use https://github.com/emacs-helm/helm/ for details
(helm-mode)
(require 'helm-xref)
(define-key global-map [remap find-file] #'helm-find-files)
(define-key global-map [remap execute-extended-command] #'helm-M-x)
(define-key global-map [remap switch-to-buffer] #'helm-mini)

;; Tab completion instead of enter completion(define-key helm-map (kbd "TAB") #'helm-execute-persistent-action)
(define-key helm-map (kbd "TAB") #'helm-execute-persistent-action)
(define-key helm-map (kbd "<tab>") #'helm-execute-persistent-action)
(define-key helm-map (kbd "C-z") #'helm-select-action)

(which-key-mode)
#+end_src

We need to setup some stuff for the different programming languages we want to support:

** C-Cpp

#+begin_src emacs-lisp
;; C / C++
(add-hook 'c-mode-hook 'lsp)
(add-hook 'c++-mode-hook 'lsp)

(setq c-default-style "linux")
(setq-default c-basic-offset 4
              tab-width 4
              indent-tabs-mode t)
#+end_src

** Python

#+begin_src emacs-lisp
;; Python lsp tutorial:
;; https://taingram.org/blog/emacs-lsp-ide.html
(add-hook 'python-mode-hook 'lsp)

(setq gc-cons-threshold (* 100 1024 1024)
      read-process-output-max (* 1024 1024)
      treemacs-space-between-root-nodes nil
      company-idle-delay 0.0
      company-minimum-prefix-length 1
      lsp-idle-delay 0.1)  ;; clangd is fast

(with-eval-after-load 'lsp-mode
  (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
  (require 'dap-cpptools)
  (yas-global-mode))
#+end_src
* Themes

We install some themes for emacs.
We set monokai as default because of its clarity and warm usage of pastel colors.

#+begin_src emacs-lisp
(use-package better-defaults)

(use-package material-theme)
(use-package monokai-theme)

;; set a default theme
(load-theme 'monokai t)
#+end_src
