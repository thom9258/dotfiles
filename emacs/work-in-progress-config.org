#+TITLE: Emacs Config
#+AUTHOR: Thomas Alexgaard Jensen (gitlab.com/alexgaard)

* Startup Basics

** Manage Emacs Server

#+begin_src emacs-lisp

;; Spawn Emacs server if not running
(load "server")
(unless (server-running-p) (server-start))

#+end_src


** Clutter Removal

#+begin_src emacs-lisp

;; Disable bars and other clutter
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1) 

(setq inhibit-startup-screen t)

#+end_src


** Proper Startup debugging

#+begin_src emacs-lisp

;; Enable debugging of config
(setq debug-on-error t)

;; Count startup time of emacs
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

#+end_src


** Basic Setup

#+begin_src emacs-lisp

;; Enable line numbers globally
(global-linum-mode t)

;; auto close bracket insertion. New in emacs 24
(electric-pair-mode 1)

;; Enable text wrap by default
(add-hook 'text-mode-hook 'visual-line-mode)

;; Move backup files to backup directory
(setq backup-directory-alist '(("." . "~/.emacs.d/backups/")))

;; Default tab sizes
;;(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

#+end_src


* Package Manager Setup

#+begin_src emacs-lisp

;; Enables basic packaging support
(require 'package)

;; Adds the Melpa archives to the list of available repositories
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)

;; Initializes the package infrastructure
(package-initialize)

;; Download use-package to handle our packages instead of package-install
(unless (package-installed-p ' use-package)
  (package-refresh-contents)
  (package install 'use-package))
(setq use-package-always-ensure t)

#+end_src


* Miscalaneous Packages

** Theme

#+begin_src emacs-lisp

(use-package material-theme)

;; Load material theme
(load-theme 'material t)

#+end_src

** Better Defaults

#+begin_src emacs-lisp

(use-package better-defaults)

#+end_src


* Evil Mode

#+begin_src emacs-lisp

;; Better undo compatability
(use-package undo-fu)

(use-package evil
  ;; tweak evil's configuration before loading it
  :init      
  ;; This is optional since it's already set to t by default.
  (setq evil-want-integration t) 
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (evil-mode))

(use-package evil-collection
  :after 'evil
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))
(evil-mode)
(evil-collection-init)

;; to work properly with evil-collection
(setq evil-want-keybinding nil)
;; no vim insert bindings
(setq evil-undo-system 'undo-fu)

(define-key global-map (kbd "<escape>") #'keyboard-escape-quit)

;;(with-eval-after-load 'evil-maps
;;  (define-key evil-motion-state-map (kbd "SPC") nil)
;;  (define-key evil-motion-state-map (kbd "RET") nil)
;;  (define-key evil-motion-state-map (kbd "TAB") nil)
;;)

#+end_src

** Evil Movement Bindings

#+begin_src emacs-lisp

;; Vim window movement
(define-key evil-normal-state-map (kbd ",h") #'evil-window-left)
(define-key evil-normal-state-map (kbd ",j") #'evil-window-down)
(define-key evil-normal-state-map (kbd ",k") #'evil-window-up)
(define-key evil-normal-state-map (kbd ",l") #'evil-window-right)

(define-key evil-normal-state-map (kbd "J") "10j")
(define-key evil-normal-state-map (kbd "K") "10k")

#+end_src


* Org & Org-Mode

#+begin_src emacs-lisp

(use-package org)

(setq org-src-preserve-indentation t)
(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory "~/Dropbox/University/Org-Roam")
  :config
  (org-roam-setup)
  )

  (with-eval-after-load 'org-faces
    (dolist (face '(org-document-title
                   org-level-1
                   org-level-2
                   org-level-3))
     (set-face-attribute face nil :height 1.0)))

#+end_src

** Evil Org Bindings

#+begin_src emacs-lisp

;; Insert Org-Roam node quickly without opening a buffer
(defun org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))

(define-key evil-normal-state-map (kbd ",wI") 'org-roam-node-insert-immediate)
(define-key evil-normal-state-map (kbd ",wi") 'org-roam-node-insert)
(define-key evil-normal-state-map (kbd ",wg") 'org-roam-graph)
(define-key evil-normal-state-map (kbd ",wt") 'org-roam-buffer-toggle)
(define-key evil-normal-state-map (kbd ",wf") 'org-roam-node-find)

;; Max width for org images
(setq org-image-actual-width nil)


#+end_src


* PDF Tools
  
#+begin_src emacs-lisp

(unless (package-installed-p 'pdf-tools)
  (package-install 'pdf-tools))

(pdf-tools-install)
(setq-default pdf-view-display-size 'fit-width)
;; Make pdf-tools default (also for tex compilation)
(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
      TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
      TeX-source-correlate-start-server t)
(add-hook 'TeX-after-compilation-finished-functions
          #'TeX-revert-document-buffer)

;; Make pdf-tools play well with "linum-mode" for some reason..
(add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))

#+end_src

** Load org-inline-pdf.el
   
#+begin_src emacs-lisp

;; Manually load custom org-inline-pdf package
;;(load-file "~/.emacs.d/manual-packages/org-inline-pdf.el/org-inline-pdf.el")
(package-install-file "~/.emacs.d/manual-packages/org-inline-pdf.el/org-inline-pdf.el")
(add-hook 'org-mode-hook #'org-inline-pdf-mode)

#+end_src

